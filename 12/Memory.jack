// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap, ram;
    static int next;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let next = 2;
        let heap[0] = null;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) { 
        var Array new;
        var int asize, cur;

        if (size < 0) {
            do Sys.error(5);
        }

        /** Free space on the heap left */
        let asize = size + 2; 
        if (asize < heap[next - 1]) {
            let cur = next;
            let next = next + asize; 
            let heap[next - 1] = heap[cur - 1] - asize; 
            let heap[next - 2] = null;
            let heap[cur - 2] = next;
            let heap[cur - 1] = size;
            return cur + heap;
        }

        /** Find first fit */
        let new = 2;
        while (~(new = next)) {
            if ((heap[new - 2] - new - heap[new - 1] - 2) > asize) {
                let cur = heap[new - 2] - asize;
                let heap[new - 2] = cur;
                let heap[new - 1] = heap[new - 1] - asize;
                let heap[cur - 2] = heap[new - 2];
                let heap[cur - 1] = asize;
                return cur + heap;
            }
            let new = heap[new - 2];
        } 

        /** Allocation failed */
        do Sys.error(6);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int cur, prev, ofst;

        let cur = 2;
        let ofst = o - heap;
        while (~(cur = ofst)) {
            let prev = cur; 
            let cur = heap[cur - 2]; 
        }
        let heap[prev - 2] = heap[ofst - 2];
        return;
    }    
}
